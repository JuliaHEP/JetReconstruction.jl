var documenterSearchIndex = {"docs":
[{"location":"examples/#Jet-Reconstruction-Examples","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"","category":"section"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"The Jet Reconstruction package has a number of example files that show how to usage.","category":"page"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"Note: because of extra dependencies in these scripts, one must use the Project.toml file in the examples directory.","category":"page"},{"location":"examples/#jetreco.jl","page":"Jet Reconstruction Examples","title":"jetreco.jl","text":"","category":"section"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"This is a basic jet reconstruction example that shows how to call the package to perform a jet reconstruction, with different algorithms and (optionally) strategy, producing exclusive and inclusive jet selections.","category":"page"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"julia --project=. examples/jetreco.jl --maxevents=100 --strategy=N2Plain test/data/events.hepmc3\n...\njulia --project=. examples/jetreco.jl --maxevents=100 --strategy=N2Tiled test/data/events.hepmc3\n...","category":"page"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"There are options to explicitly set the algorithm (use --help to see these).","category":"page"},{"location":"examples/#instrumented-jetreco.jl","page":"Jet Reconstruction Examples","title":"instrumented-jetreco.jl","text":"","category":"section"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"This is a more sophisticated example that allows performance measurements to be made of the reconstruction, as well as profiling (flamegraphs and memory profiling). Use the --help option to see usage. e.g., to extract timing performance for the AntiKt algorithm using the tiled strategy:","category":"page"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"julia --project instrumented-jetreco.jl -S N2Tiled -A AntiKt --nsamples 100 ../test/data/events.hepmc3","category":"page"},{"location":"examples/#visualise-jets.jl","page":"Jet Reconstruction Examples","title":"visualise-jets.jl","text":"","category":"section"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"This script will produce a PNG/PDF showing the results of a jet reconstruction. This is a 3D plot where all the initial energy deposits are visualised, with colours that indicate in which final cluster the deposit ended up in.","category":"page"},{"location":"examples/#visualise-jets.ipynb","page":"Jet Reconstruction Examples","title":"visualise-jets.ipynb","text":"","category":"section"},{"location":"examples/","page":"Jet Reconstruction Examples","title":"Jet Reconstruction Examples","text":"Similar to visualise-jets.jl this notebook will produce a visualisation of jet reconstruction in the browser. This is a 3D plot where all the initial energy deposits are visualised, with colours that indicate in which final cluster the deposit ended up in.","category":"page"},{"location":"#Jet-Reconstruction","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"This package implements sequential Jet Reconstruction (clustering) algorithms, which are used in high-energy physics as part of event reconstruction for pp and e^+e^- colliders.","category":"page"},{"location":"#Algorithms","page":"Jet Reconstruction","title":"Algorithms","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Algorithms used are based on the C++ FastJet package (https://fastjet.fr, hep-ph/0512210, arXiv:1111.6097), reimplemented natively in Julia.","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The algorithms include textanti-k_textT, Cambridge/Aachen and inclusive k_textT.","category":"page"},{"location":"#Reconstruction-Interface","page":"Jet Reconstruction","title":"Reconstruction Interface","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The main interface for reconstruction is:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"jet_reconstruct(particles; p = -1, R = 1.0, recombine = +, strategy = RecoStrategy.Best)","category":"page"},{"location":"#JetReconstruction.jet_reconstruct-Tuple{Any}","page":"Jet Reconstruction","title":"JetReconstruction.jet_reconstruct","text":"jet_reconstruct(particles; p = -1, R = 1.0, recombine = +, strategy = RecoStrategy.Best)\n\nReconstructs jets from a collection of particles using a specified algorithm and strategy\n\nArguments\n\nparticles: A collection of particles used for jet reconstruction. \np=-1: The power value used for the distance measure for generalised k_T, which maps to a particular reconstruction algorithm (-1 = AntiKt, 0 = Cambridge/Aachen, 1 = Kt).\nR=1.0: The jet radius parameter.\nrecombine=+: The recombination scheme used for combining particles.\nstrategy=RecoStrategy.Best: The jet reconstruction strategy to use. RecoStrategy.Best makes a dynamic decision based on the number of starting particles.\n\nReturns\n\nA cluster sequence object containing the reconstructed jets and the merging history.\n\nDetails\n\nparticles argument\n\nAny type that supplies the methods pt2(), phi(), rapidity(), px(), py(), pz(), energy() (in the JetReconstruction namespace) can be used. This includes LorentzVector, LorentzVectorCyl, and PseudoJet, for which these methods are already predefined in the JetReconstruction namespace.\n\nrecombine argument\n\nThe recombine argument is the function used to merge pairs of particles. The default is simply +(jet1,jet2), i.e. 4-momenta addition or the E-scheme.\n\nExample\n\njet_reconstruct(particles; p = -1, R = 0.4)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The object returned is a ClusterSequence, which internally tracks all merge steps.","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"ClusterSequence","category":"page"},{"location":"#JetReconstruction.ClusterSequence","page":"Jet Reconstruction","title":"JetReconstruction.ClusterSequence","text":"struct ClusterSequence\n\nA struct holding the full history of a jet clustering sequence, including the final jets.\n\nFields\n\nalgorithm::JetAlgorithm.Algorithm: The algorithm used for clustering.\nstrategy::RecoStrategy.Strategy: The strategy used for clustering.\njets::Vector{PseudoJet}: The physical PseudoJets in the cluster sequence. Each PseudoJet corresponds to a position in the history.\nn_initial_jets::Int: The initial number of particles used for exclusive jets.\nhistory::Vector{HistoryElement}: The branching history of the cluster sequence. Each stage in the history indicates where to look in the jets vector to get the physical PseudoJet.\nQtot::Any: The total energy of the event.\n\n\n\n\n\n","category":"type"},{"location":"#Strategy","page":"Jet Reconstruction","title":"Strategy","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Three strategies are available for the different algorithms:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Strategy Name Notes Interface\nRecoStrategy.Best Dynamically switch strategy based on input particle density jet_reconstruct\nRecoStrategy.N2Plain Global matching of particles at each interation (works well for low N) plain_jet_reconstruct\nRecoStrategy.N2Tiled Use tiles of radius R to limit search space (works well for higher N) tiled_jet_reconstruct","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Generally one can use the jet_reconstruct interface, shown above, as the Best strategy safely as the overhead is extremely low. That interface supports a strategy option to switch to a different option.","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Another option, if one wishes to use a specific strategy, is to call that strategy's interface directly, e.g.,","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"# For N2Plain strategy called directly\nplain_jet_reconstruct(particles::Vector{T}; p = -1, R = 1.0, recombine = +)","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Note that there is no strategy option in these interfaces.","category":"page"},{"location":"#Inclusive-and-Exclusive-Selections","page":"Jet Reconstruction","title":"Inclusive and Exclusive Selections","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"To obtain final jets both inclusive (p_T cut) and exclusive (n_jets or d_ij cut) selections are supported:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"inclusive_jets(clusterseq::ClusterSequence, ptmin = 0.0)","category":"page"},{"location":"#JetReconstruction.inclusive_jets","page":"Jet Reconstruction","title":"JetReconstruction.inclusive_jets","text":"inclusive_jets(clusterseq::ClusterSequence, ptmin = 0.0)\n\nReturn all inclusive jets of a ClusterSequence with pt > ptmin.\n\nArguments\n\nclusterseq::ClusterSequence: The ClusterSequence object containing the clustering history and jets.\nptmin::Float64 = 0.0: The minimum transverse momentum (pt) threshold for the inclusive jets.\n\nReturns\n\nAn array of LorentzVectorCyl objects representing the inclusive jets.\n\nDescription\n\nThis function computes the inclusive jets from a given ClusterSequence object. It iterates over the clustering history and checks the transverse momentum of each parent jet. If the transverse momentum is greater than or equal to ptmin, the jet is added to the array of inclusive jets.\n\nExample\n\ninclusive_jets(clusterseq, ptmin = 10.0)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"exclusive_jets(clusterseq::ClusterSequence; dcut = nothing, njets = nothing)","category":"page"},{"location":"#JetReconstruction.exclusive_jets-Tuple{ClusterSequence}","page":"Jet Reconstruction","title":"JetReconstruction.exclusive_jets","text":"exclusive_jets(clusterseq::ClusterSequence; dcut = nothing, njets = nothing)\n\nReturn all exclusive jets of a ClusterSequence, with either a specific number of jets or a cut on the maximum distance parameter.\n\nArguments\n\nclusterseq::ClusterSequence: The ClusterSequence object containing the clustering history and jets.\ndcut::Union{Nothing, Real}: The distance parameter used to define the exclusive jets. If dcut is provided, the number of exclusive jets will be calculated based on this parameter.\nnjets::Union{Nothing, Integer}: The number of exclusive jets to be calculated. If njets is provided, the distance parameter dcut will be calculated based on this number.\n\nNote: Either dcut or njets must be provided (but not both).\n\nReturns\n\nAn array of LorentzVectorCyl objects representing the exclusive jets.\n\nExceptions\n\nArgumentError: If neither dcut nor njets is provided.\nArgumentError: If the algorithm used in the ClusterSequence object is not suitable for exclusive jets.\nErrorException: If the cluster sequence is incomplete and exclusive jets are unavailable.\n\nExamples\n\nexclusive_jets(clusterseq, dcut = 20.0)\nexclusive_jets(clusterseq, njets = 3)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The number of exclusive jets passing a particular dcut can be obtained:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"n_exclusive_jets(clusterseq::ClusterSequence; dcut::AbstractFloat)","category":"page"},{"location":"#JetReconstruction.n_exclusive_jets-Tuple{ClusterSequence}","page":"Jet Reconstruction","title":"JetReconstruction.n_exclusive_jets","text":"n_exclusive_jets(clusterseq::ClusterSequence; dcut::AbstractFloat)\n\nReturn the number of exclusive jets of a ClusterSequence that are above a certain dcut value.\n\nArguments\n\nclusterseq::ClusterSequence: The ClusterSequence object containing the clustering history.\ndcut::AbstractFloat: The maximum calue for the distance parameter in the reconstruction.\n\nReturns\n\nThe number of exclusive jets in the ClusterSequence object.\n\nExample\n\nn_exclusive_jets(clusterseq, dcut = 20.0)\n\n\n\n\n\n","category":"method"},{"location":"#Sorting","page":"Jet Reconstruction","title":"Sorting","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Sorting vectors is trivial in Julia, no special sorting methods are provided. As an example, to sort exclusive jets of 50 (usually GeV, depending on your EDM) from highest energy to lowest:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"sorted_jets = sort!(inclusive_jets(cs::ClusterSequence; ptmin=5.0), \n  by=JetReconstruction.energy, rev=true)","category":"page"},{"location":"#Plotting","page":"Jet Reconstruction","title":"Plotting","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"(Image: illustration)","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"To visualise the clustered jets as a 3d bar plot (see illustration above) we now use Makie.jl. See the jetsplot function in ext/JetVisualisation.jl and its documentation for more. There are two worked examples in the examples directory.","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The plotting code is a package extension and will load if the one of the Makie modules is loaded in the environment.","category":"page"},{"location":"#Serialisation","page":"Jet Reconstruction","title":"Serialisation","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The package also provides methods such as loadjets, loadjets!, and savejets that one can use to save and load objects on/from disk easily in a very flexible format. See documentation for more.","category":"page"},{"location":"#Reference","page":"Jet Reconstruction","title":"Reference","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Although it has been developed further since the CHEP2023 conference, the CHEP conference proceedings, 10.1051/epjconf/202429505017, should be cited if you use this package:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"@article{refId0,\n    author = {{Stewart, Graeme Andrew} and {Gras, Philippe} and {Hegner, Benedikt} and {Krasnopolski, Atell}},\n    doi = {10.1051/epjconf/202429505017},\n    journal = {EPJ Web of Conf.},\n    pages = {05017},\n    title = {Polyglot Jet Finding},\n    url = {https://doi.org/10.1051/epjconf/202429505017},\n    volume = 295,\n    year = 2024,\n    eprint={2309.17309},\n    archivePrefix={arXiv},\n    primaryClass={hep-ex}\n}","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The original paper on arXiv is:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"@misc{stewart2023polyglot,\n      title={Polyglot Jet Finding}, \n      author={Graeme Andrew Stewart and Philippe Gras and Benedikt Hegner and Atell Krasnopolski},\n      year={2023},\n      eprint={2309.17309},\n      archivePrefix={arXiv},\n      primaryClass={hep-ex}\n}","category":"page"},{"location":"#Authors-and-Copyright","page":"Jet Reconstruction","title":"Authors and Copyright","text":"","category":"section"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Code in this package is authored by:","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"Atell Krasnopolski <delta_atell@protonmail.com>\nGraeme A Stewart <graeme.andrew.stewart@cern.ch>\nPhilippe Gras <philippe.gras@cern.ch>","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"and is Copyright 2022-2024 The Authors, CERN.","category":"page"},{"location":"","page":"Jet Reconstruction","title":"Jet Reconstruction","text":"The code is under the MIT License.","category":"page"}]
}
